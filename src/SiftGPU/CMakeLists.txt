SET (HDRS
	config.h
	CuTexImage.h
	FrameBufferObject.h
	GlobalUtil.h
	GLTexImage.h
	LiteWindow.h
	ProgramCU.h
	ProgramGLSL.h
	PyramidCU.h
	PyramidGL.h
	ShaderMan.h
	SiftGPU.h
	SiftMatch.h
	SiftMatchCU.h
	SiftPyramid.h
)

SET (SRCS
	CuTexImage.cpp
	FrameBufferObject.cpp
	GlobalUtil.cpp
	GLTexImage.cpp
	ProgramGLSL.cpp
	PyramidCU.cpp
	PyramidGL.cpp
	ShaderMan.cpp
	SiftGPU.cpp
	SiftMatch.cpp
	SiftMatchCU.cpp
	SiftPyramid.cpp
)

SET (SRCS_CUDA
	ProgramCU.cu
)

SET(SIFTGPU_ENABLE_SERVER TRUE)
SET(SIFTGPU_ENABLE_OPENCL FALSE)
SET(SIFTGPU_ENABLE_CUDA TRUE)
SET(SIFTGPU_ENABLE_SSE TRUE)
SET(SIFTGPU_PREFER_GLUT TRUE)
SET(SIFTGPU_DISABLE_DEVIL FALSE)

IF(MSVC)
	# Force to always compile with W4
	#IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
	#	string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	#ELSE()
	#	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
	#ENDIF()
 ELSE(MSVC)	
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-deprecated" )
ENDIF(MSVC)

IF(SIFTGPU_ENABLE_SSE)
	IF(WIN32)
	ELSE(WIN32)
		SET(SIFTGPU_SSE_OPTIONS "-march=core2 -mfpmath=sse")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SIFTGPU_SSE_OPTIONS}" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-deprecated" )
	ENDIF(WIN32)
ENDIF(SIFTGPU_ENABLE_SSE)
  
IF(SIFTGPU_PREFER_GLUT)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWINDOW_PREFER_GLUT" )
ENDIF(SIFTGPU_PREFER_GLUT)

IF(SIFTGPU_ENABLE_OPENCL)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCL_SIFTGPU_ENABLED" )
ENDIF(SIFTGPU_ENABLE_OPENCL)

add_definitions(-DCUDA_SIFTGPU_ENABLED -DDLL_EXPORT -DSIFTGPU_DLL -DSIFTGPU_EXPORTS -DSERVER_SIFTGPU_ENABLED)

IF(WIN32)
	SET(LIBS_SIFTGPU Winmm.lib )
ELSE(WIN32)
	IF(APPLE)
		SET(LIBS_SIFTGPU )
	ELSE(APPLE)
		SET(LIBS_SIFTGPU glut GL X11 dl)
	ENDIF(APPLE)
ENDIF(WIN32)

IF(SIFTGPU_DISABLE_DEVIL)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSIFTGPU_NO_DEVIL" )
ELSE(SIFTGPU_DISABLE_DEVIL)
	# SET(LIBS_SIFTGPU ${LIBS_SIFTGPU} ${DevIL} )
ENDIF(SIFTGPU_DISABLE_DEVIL)

SET(BUILD_LIBRARIES "")

IF (GLEW_FOUND)
	include_directories( ${GLEW_INCLUDE_PATH} )
	SET(BUILD_LIBRARIES ${BUILD_LIBRARIES} ${GLEW_LIBRARIES})
ENDIF (GLEW_FOUND)

IF (GLUT_FOUND)
	include_directories( ${GLUT_INCLUDE_DIR} )
	SET(BUILD_LIBRARIES ${BUILD_LIBRARIES} ${GLUT_LIBRARIES})
ENDIF (GLUT_FOUND)

IF (DevIL_FOUND AND NOT SIFTGPU_DISABLE_DEVIL)
	include_directories( ${DevIL_INCLUDE_DIR} )
	SET(BUILD_LIBRARIES ${BUILD_LIBRARIES} ${DevIL_LIBRARIES})
ENDIF (DevIL_FOUND AND NOT SIFTGPU_DISABLE_DEVIL)

IF (CUDA_FOUND)
	include_directories( ${CUDA_INCLUDE_DIRS} )
	SET(BUILD_LIBRARIES ${BUILD_LIBRARIES} ${CUDA_LIBRARIES})
ENDIF (CUDA_FOUND)

# nvcc flags                                                                                                                                                                                               
SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode arch=compute_20,code="compute_20,sm_20,sm_21,sm_30,sm_32,sm_35,sm_50,sm_52")

#compile cuda files
CUDA_COMPILE(GENERATED_FILES ${SRCS_CUDA})

#build library
ADD_LIBRARY(${TARGET_LIB_NAME} SHARED ${SRCS} ${HDRS} ${GENERATED_FILES})

TARGET_LINK_LIBRARIES(${TARGET_LIB_NAME} ${LIBS_SIFTGPU} ${BUILD_LIBRARIES} ${OPENGL_LIBRARIES} ${CUDA_LIBRARIES})

INSTALL(FILES SiftGPU.h DESTINATION ${PROJECT_SOURCE_DIR}/include)
INSTALL(FILES config.h DESTINATION ${PROJECT_SOURCE_DIR}/include)
INSTALL(TARGETS ${TARGET_LIB_NAME}
        RUNTIME DESTINATION ${PROJECT_SOURCE_DIR}/bin
        LIBRARY DESTINATION ${PROJECT_SOURCE_DIR}/lib
		ARCHIVE DESTINATION ${PROJECT_SOURCE_DIR}/lib
)
